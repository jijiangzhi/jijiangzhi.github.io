<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技匠志</title>
  <subtitle>一个不一样的技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-02-17T14:34:29.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Edison Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【转】成为优秀程序员的10条黄金法则</title>
    <link href="http://yoursite.com/2016/02/17/%E3%80%90%E8%BD%AC%E3%80%91%E6%88%90%E4%B8%BA%E4%BC%98%E7%A7%80%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8410%E6%9D%A1%E9%BB%84%E9%87%91%E6%B3%95%E5%88%99/"/>
    <id>http://yoursite.com/2016/02/17/【转】成为优秀程序员的10条黄金法则/</id>
    <published>2016-02-17T14:18:23.000Z</published>
    <updated>2016-02-17T14:34:29.000Z</updated>
    
    <content type="html">&lt;p&gt;下面这10个要点能帮助你成为一个更优秀的程序员。&lt;/p&gt;
&lt;h3 id=&quot;1-__u4E0D_u8981_u91CD_u590D&quot;&gt;&lt;a href=&quot;#1-__u4E0D_u8981_u91CD_u590D&quot; class=&quot;headerlink&quot; title=&quot;1. 不要重复&quot;&gt;&lt;/a&gt;1. 不要重复&lt;/h3&gt;&lt;p&gt;这是一条非常值得遵循的伟大原则。我很习惯于回过头去检查自己写下的代码，重构那些被多次使用的部分。虽然在将一个长方法分解为若干个短方法时，会遇到一些困难。Ctrl + R + M在visual Studio中非常有用，可以帮助你重构代码为单独的方法。这使得代码更加可重用和可测试。&lt;/p&gt;
&lt;h3 id=&quot;2-__u547D_u540D_u53D8_u91CF_u7684_u8981_u70B9_u4E3A_u8BF4_u660E_u5B83_u4EEC_u662F_u4EC0_u4E48_uFF0C_u800C_u975E_u5B83_u4EEC_u662F_u4EC0_u4E48_u6837_u7684_u6570_u636E_u7C7B_u578B&quot;&gt;&lt;a href=&quot;#2-__u547D_u540D_u53D8_u91CF_u7684_u8981_u70B9_u4E3A_u8BF4_u660E_u5B83_u4EEC_u662F_u4EC0_u4E48_uFF0C_u800C_u975E_u5B83_u4EEC_u662F_u4EC0_u4E48_u6837_u7684_u6570_u636E_u7C7B_u578B&quot; class=&quot;headerlink&quot; title=&quot;2. 命名变量的要点为说明它们是什么，而非它们是什么样的数据类型&quot;&gt;&lt;/a&gt;2. 命名变量的要点为说明它们是什么，而非它们是什么样的数据类型&lt;/h3&gt;&lt;p&gt;唯一的例外是，如果你正在处理别人的代码，并且需要继续参与的，那么你应该遵照他们的命名规则。&lt;/p&gt;
&lt;h3 id=&quot;3-__u7ED9_u4F60_u7684_u65B9_u6CD5_u53D6_u4E00_u4E2A_u660E_u786E_u8BF4_u660E_u4ED6_u4EEC_u8981_u505A_u4EC0_u4E48_u7684_u540D_u79F0&quot;&gt;&lt;a href=&quot;#3-__u7ED9_u4F60_u7684_u65B9_u6CD5_u53D6_u4E00_u4E2A_u660E_u786E_u8BF4_u660E_u4ED6_u4EEC_u8981_u505A_u4EC0_u4E48_u7684_u540D_u79F0&quot; class=&quot;headerlink&quot; title=&quot;3. 给你的方法取一个明确说明他们要做什么的名称&quot;&gt;&lt;/a&gt;3. 给你的方法取一个明确说明他们要做什么的名称&lt;/h3&gt;&lt;p&gt;这一条如果做得好，那么将大大减少注释的必要。如果你的代码清晰易读，那还需要注释干什么。&lt;/p&gt;
&lt;h3 id=&quot;4-__u4E0D_u8981_u4F7F_u7528_u5947_u5947_u602A_u602A_u7684_u6570_u5B57_u548C_u5B57_u7B26_u4E32_u5E38_u91CF&quot;&gt;&lt;a href=&quot;#4-__u4E0D_u8981_u4F7F_u7528_u5947_u5947_u602A_u602A_u7684_u6570_u5B57_u548C_u5B57_u7B26_u4E32_u5E38_u91CF&quot; class=&quot;headerlink&quot; title=&quot;4. 不要使用奇奇怪怪的数字和字符串常量&quot;&gt;&lt;/a&gt;4. 不要使用奇奇怪怪的数字和字符串常量&lt;/h3&gt;&lt;p&gt;你的代码中不应该有任何会造成他人误解或需要猜测的数字和字符串值。创建常量、枚举和私有变量时，要给他们取一个能够更易于理解的名字。&lt;/p&gt;
&lt;h3 id=&quot;5-__u53EF_u80FD_u7684_u8BDD_uFF0C_u81EA_u5DF1_u5199_u65B9_u6CD5_uFF0C_u8FD9_u6837_u5728_u6D4B_u8BD5_u65B9_u6CD5_u65F6_uFF0C_u5C31_u4E0D_u4F1A_u5BF9_u5E94_u7528_u7A0B_u5E8F_u7684_u5176_u4ED6_u90E8_u5206_u6709_u4EFB_u4F55_u4F9D_u8D56&quot;&gt;&lt;a href=&quot;#5-__u53EF_u80FD_u7684_u8BDD_uFF0C_u81EA_u5DF1_u5199_u65B9_u6CD5_uFF0C_u8FD9_u6837_u5728_u6D4B_u8BD5_u65B9_u6CD5_u65F6_uFF0C_u5C31_u4E0D_u4F1A_u5BF9_u5E94_u7528_u7A0B_u5E8F_u7684_u5176_u4ED6_u90E8_u5206_u6709_u4EFB_u4F55_u4F9D_u8D56&quot; class=&quot;headerlink&quot; title=&quot;5. 可能的话，自己写方法，这样在测试方法时，就不会对应用程序的其他部分有任何依赖&quot;&gt;&lt;/a&gt;5. 可能的话，自己写方法，这样在测试方法时，就不会对应用程序的其他部分有任何依赖&lt;/h3&gt;&lt;p&gt;将方法写成不需要关注从哪里调用的方式。这样会让代码更可测和更可重用。&lt;/p&gt;
&lt;p&gt;如果你正在使用会话值或app设定值，那么把它们作为变量传递，得到会话，并在你调用方法的时候配置值。这能让代码变得更可测。&lt;/p&gt;
&lt;h3 id=&quot;6-__u4E0D_u8981_u5BB3_u6015_u5BFB_u6C42_u5E2E_u52A9&quot;&gt;&lt;a href=&quot;#6-__u4E0D_u8981_u5BB3_u6015_u5BFB_u6C42_u5E2E_u52A9&quot; class=&quot;headerlink&quot; title=&quot;6. 不要害怕寻求帮助&quot;&gt;&lt;/a&gt;6. 不要害怕寻求帮助&lt;/h3&gt;&lt;p&gt;这句话不是让你在碰到所有问题时都去寻求帮助，我的意思首先你得自己去思考，去尝试自己解决问题，但如果你实在想不出解决方法，那么就应该去寻求他 人的帮助。可能已经有人经历过这个问题，知道如何解决它。同时，在告诉别人你正在做什么，你期待什么样的结果，问题是什么的过程中，或许灵机一现，搞不好 你自己就揪出问题的关键了呢。&lt;/p&gt;
&lt;h3 id=&quot;7-__u4E0D_u62D6_u5EF6&quot;&gt;&lt;a href=&quot;#7-__u4E0D_u62D6_u5EF6&quot; class=&quot;headerlink&quot; title=&quot;7. 不拖延&quot;&gt;&lt;/a&gt;7. 不拖延&lt;/h3&gt;&lt;p&gt;如果你看到bug或乱码，那么当时就解决然后再前进。不要想着以后去做或让别人去做。&lt;/p&gt;
&lt;h3 id=&quot;8-__u4E0E_u4ED6_u4EBA_u5206_u4EAB_u77E5_u8BC6&quot;&gt;&lt;a href=&quot;#8-__u4E0E_u4ED6_u4EBA_u5206_u4EAB_u77E5_u8BC6&quot; class=&quot;headerlink&quot; title=&quot;8. 与他人分享知识&quot;&gt;&lt;/a&gt;8. 与他人分享知识&lt;/h3&gt;&lt;p&gt;不要敝帚自珍。尝试创建一种互助的文化。你会发现，团队的工作效率比单枪匹马更高，并且互相帮助的氛围能更快地提升各自的水平。同事的进步，并不会让你落后，也不会让你有被炒的风险。相反，你变得更有价值，因为你不但拥有渊博的知识，敢于学习，还能帮助周围的人一起提高。&lt;/p&gt;
&lt;h3 id=&quot;9-__u5F53_u4F60_u7684_u540C_u4E8B_u6C89_u6D78_u5728_u601D_u8003_u4E2D_u65F6_uFF0C_u4E0D_u8981_u6253_u65AD_u4ED6_u4EEC&quot;&gt;&lt;a href=&quot;#9-__u5F53_u4F60_u7684_u540C_u4E8B_u6C89_u6D78_u5728_u601D_u8003_u4E2D_u65F6_uFF0C_u4E0D_u8981_u6253_u65AD_u4ED6_u4EEC&quot; class=&quot;headerlink&quot; title=&quot;9. 当你的同事沉浸在思考中时，不要打断他们&quot;&gt;&lt;/a&gt;9. 当你的同事沉浸在思考中时，不要打断他们&lt;/h3&gt;&lt;p&gt;己所不欲，勿施于人，当你自己沉浸在编程中时，当你的大脑高速运转工作时，就像你正在小心翼翼地用纸牌搭建房子一样，你也不希望有人来打搅你。这时 如果有人问你问题的话，那么你的注意力必然无法集中，就像房子可能会很容易坍塌。这可能需要5到10分钟的时间才能将注意力重新集中起来，将思绪一一理 顺，而原本这个问题只需要Google搜索一下，或者询问别人就能解决。如果你在这方面尊重你的同事，并且让他们知道这样做的重要性，那么他们也会做相同 的事，从而反过来让你变得更高效。&lt;/p&gt;
&lt;h3 id=&quot;10-__u79EF_u6781_u5730_u9762_u5BF9_u6279_u8BC4_uFF0C_u800C_u4E0D_u662F_u6D88_u6781_u62B5_u5236_u3002&quot;&gt;&lt;a href=&quot;#10-__u79EF_u6781_u5730_u9762_u5BF9_u6279_u8BC4_uFF0C_u800C_u4E0D_u662F_u6D88_u6781_u62B5_u5236_u3002&quot; class=&quot;headerlink&quot; title=&quot;10. 积极地面对批评，而不是消极抵制。&quot;&gt;&lt;/a&gt;10. 积极地面对批评，而不是消极抵制。&lt;/h3&gt;&lt;p&gt;对我来说，批评是一个让我能够改善提高的机会。如果还有一种做事的方法是我没有想到的，那么我会想去了解它，因为这或许能帮助我改进自己。&lt;/p&gt;
&lt;p&gt;好了，10条黄金法则已经讲述完毕，下面让我们一起学习它们，利用它们，成就更优秀的自己吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;下面这10个要点能帮助你成为一个更优秀的程序员。&lt;/p&gt;
&lt;h3 id=&quot;1-__u4E0D_u8981_u91CD_u590D&quot;&gt;&lt;a href=&quot;#1-__u4E0D_u8981_u91CD_u590D&quot; class=&quot;headerlink&quot; title=&quot;1. 不要重
    
    </summary>
    
      <category term="程序员" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    
      <category term="程序员" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>我是如何自学设计的</title>
    <link href="http://yoursite.com/2016/02/17/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E8%AE%BE%E8%AE%A1%E7%9A%84/"/>
    <id>http://yoursite.com/2016/02/17/我是如何自学设计的/</id>
    <published>2016-02-17T13:10:03.000Z</published>
    <updated>2016-02-17T14:34:25.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="设计师" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    
      <category term="设计师" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>如何成为一名优秀的全栈工程师</title>
    <link href="http://yoursite.com/2016/02/17/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E4%BC%98%E7%A7%80%E7%9A%84%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    <id>http://yoursite.com/2016/02/17/如何成为一名优秀的全栈工程师/</id>
    <published>2016-02-16T22:40:41.000Z</published>
    <updated>2016-02-17T13:36:32.000Z</updated>
    
    <content type="html">&lt;img src=&quot;/2016/02/17/如何成为一名优秀的全栈工程师/hero.png&quot; alt=&quot;《全栈工程师》&quot; title=&quot;《全栈工程师》&quot;&gt;
&lt;h3 id=&quot;u5199_u5728_u6700_u524D&quot;&gt;&lt;a href=&quot;#u5199_u5728_u6700_u524D&quot; class=&quot;headerlink&quot; title=&quot;写在最前&quot;&gt;&lt;/a&gt;写在最前&lt;/h3&gt;&lt;p&gt;我的前一篇文章&lt;a href=&quot;http://www.jianshu.com/p/cb49694dd698&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《给职场新人的10点职涯建议》&lt;/a&gt;发表后，得到了很多简友，特别是年轻程序员朋友们的喜爱，这令我颇感意外，但又很受鼓舞。同时，我也收到了一些简信，大多来自那些毕业不久，刚步入工作岗位的职场新人。询问的内容也大多是如何选择职业方向，如何成为一名优秀的软件工程师，以及怎样快速提高自身的技能等。我在一一回复的同时，不禁想结合自身的经历，谈谈如何才能成为一名优秀的全栈工程师。&lt;/p&gt;
&lt;h3 id=&quot;u4EC0_u4E48_u662F_u5168_u6808_u5DE5_u7A0B_u5E08&quot;&gt;&lt;a href=&quot;#u4EC0_u4E48_u662F_u5168_u6808_u5DE5_u7A0B_u5E08&quot; class=&quot;headerlink&quot; title=&quot;什么是全栈工程师&quot;&gt;&lt;/a&gt;什么是全栈工程师&lt;/h3&gt;&lt;p&gt;全栈工程师一词，最早出现于Facebook工程师Calos Bueno的一篇文章 - &lt;a href=&quot;https://www.facebook.com/note.php?note_id=461505383919&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Full Stack&lt;/a&gt; （需翻墙）。他把全栈工程师定义为对性能影响有着深入理解的技术通才。自那以后&lt;strong&gt;全栈&lt;/strong&gt;这个词便流行起来，我看到过的就有全栈工程师，全栈设计师，全栈运维，全栈市场营销人员等等。而在“拉钩”，“100Offer”等针对互联网人才的招聘网站上，全栈工程师更是一跃成为热门招聘职位，其薪资水平也比一般的开发工程师职位要高出一截。那么，什么是全栈工程师，我们又应该如何定义一名全栈工程师呢？&lt;/p&gt;
&lt;p&gt;百度百科对全栈工程师的定义是这样的：“掌握多种技能，并能利用多种技能独立完成产品的人”。我觉得这个定义还不够全面，我认为全栈工程师应该同时是一位资深开发工程师、架构师以及具有敏捷开发技能的程序员。全栈工程师对于软件开发的认识往往已经进化了，他们把特定的技术抛到了身后，明白技术的更新始终比计算机理论要快的道理，因此，他们注重强化自身的核心技能，关注并乐于实践其他技术。全栈工程师往往是某一方面的专家，同时通晓并善于在正确的场合运用其他语言、工具和技术。&lt;/p&gt;
&lt;h3 id=&quot;u5168_u6808_u5DE5_u7A0B_u5E08_u7684_u4EF7_u503C&quot;&gt;&lt;a href=&quot;#u5168_u6808_u5DE5_u7A0B_u5E08_u7684_u4EF7_u503C&quot; class=&quot;headerlink&quot; title=&quot;全栈工程师的价值&quot;&gt;&lt;/a&gt;全栈工程师的价值&lt;/h3&gt;&lt;p&gt;随着时间的推移，全栈工程师的作用和价值在越来越多的产品或项目中得到了印证。那么，我们来看看全栈工程师对于个人或公司意味着什么。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;个人价值及自由度的极大提升&lt;/strong&gt; —— 我曾看过一些介绍全栈工程师的文章，文中大多强调了全栈工程师对于公司与团队的价值。而我想说的是，没有一个优秀的全栈工程师是因为会对公司产生多大的利益，而努力学习各种技术的。我所认识的他们，都是那些有着一颗匠心，不断追求更高技能，并执着于做出更优秀产品的人。而当你成为一名真正的全栈工程师后，会感受到前所未有的个人价值与技术自由度的提升。试想当一个很好的创意出现时，你可以一个人或主导一个团队去实现并不断完善它，这是一件多么让人兴奋的事啊！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;全局思维与技术前瞻性&lt;/strong&gt; —— 由于具备了各个开发环节与技术领域的知识，全栈工程师往往具有更好的大局观和技术前瞻性，能够在项目初期就选择正确的技术，并很好地把控一个项目的整体方向。现代项目往往非常复杂，而全栈工程师往往能带来技术和质量上的保障，从而成为一个项目成功的关键人物。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;降低沟通成本&lt;/strong&gt; —— 我经常听到有设计师抱怨前端工程师无法百分之百地还原他们的设计，而前端工程师又在抱怨后端工程师从接口返回的数据更本无法直接使用，后端工程师也在抱怨产品经理所提的需求根本无法完成。随着团队人数的上升，由于各自技能栈的不同，沟通成本一定会随之上升。全栈工程师除了能够独立完成前后端的开发（甚至包括设计）外，如果能够在项目初期提前介入，便能很好地规避技术风险，过滤不合理的需求，从而显著降低因不同技术差异导致的沟通问题，显著降低项目风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;初创公司&lt;/strong&gt; —— 我们已经来到了一个万众创业，全民创新的时代。那些初创公司也如雨后春笋般不断涌现。初创公司往往都有了一个不错的创意，但经常会遇到“就缺一个程序员”的尴尬。我想说的是，他们其实并不是缺程序员，而是缺一位全栈工程师。初创公司往往资金有限，而一名优秀的全栈工程师能够帮助初创公司用最低的代价与最短的时间推出自己的产品。这是初创公司能够存活下来，拿到更多投资，甚至成为“独角兽”一员的最关键一步。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u5168_u6808_u5DE5_u7A0B_u5E08_u7684_u6280_u80FD_u6808&quot;&gt;&lt;a href=&quot;#u5168_u6808_u5DE5_u7A0B_u5E08_u7684_u6280_u80FD_u6808&quot; class=&quot;headerlink&quot; title=&quot;全栈工程师的技能栈&quot;&gt;&lt;/a&gt;全栈工程师的技能栈&lt;/h3&gt;&lt;p&gt;看到这里你一定会问，到底需要具备怎样的技能才能成为一名全栈工程呢？下面这张图来自Medium，作者将软件开发所涉及的各个方面分为层，又将每个层所包含的主要技术作为组件，制作了这张全栈技术图。&lt;/p&gt;
&lt;img src=&quot;/2016/02/17/如何成为一名优秀的全栈工程师/full-stack.png&quot; alt=&quot;《全栈技能图》&quot; title=&quot;《全栈技能图》&quot;&gt;
&lt;p&gt;从上面这张图，我们不难发现，现在的技术体系是多么庞大，每一年又会有新的技术加入到这些层中，而已有的技术又在不断地更新。因此要掌握所有技术是根本不可能的，而成为全栈工程师也并不需要你真的掌握所有的技术，你应该将自己的精力聚焦于关键开发技能以及一些必须掌握的附加技能上。&lt;/p&gt;
&lt;h4 id=&quot;u5173_u952E_u5F00_u53D1_u6280_u80FD_uFF08_u786C_u5B9E_u529B_uFF09_uFF1A&quot;&gt;&lt;a href=&quot;#u5173_u952E_u5F00_u53D1_u6280_u80FD_uFF08_u786C_u5B9E_u529B_uFF09_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;关键开发技能（硬实力）：&quot;&gt;&lt;/a&gt;关键开发技能（硬实力）：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Git / GitHub &lt;/strong&gt;—— 你必须掌握如何使用Git来管理和分享你的代码。把Git作为关键技能的第一条，是因为它不仅仅是一个代码管理工具，更是一种推荐的工作方式。它使你能在任何地方进行开发，高效地管理任何大小的项目，通过Git你还能与其他团队成员进行分布式协作，大大提升工作效率。通过GitHub，还能将你与世界所有的开发者联系在一起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;至少一门编程语言&lt;/strong&gt; —— 你需要精通至少一门编程语言，JAVA 、PHP、C#、Python、Ruby、Perl 等，因为你的大多数核心业务处理都需要用这门语言来写。你既要掌握这门语言的语法，又需要非常熟悉如何基于这门语言进行项目的架构、设计、实现以及测试。如果你选择的是JAVA，那么你就需要掌握面向对象的设计和开发，设计模式的应用，基于J2EE各个组件的开发 等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;运用开发框架和第三方库&lt;/strong&gt; —— 流行的开发语言，一般都伴有出色的开发框架，比如JAVA的Spring、MyBatis、Hibernate，Python的Django，PHP的 thinkphp、yin，nodeJs的 express 等等。这些开发框架往往都遵循软件开发领域的一些最佳实践，并由非常优秀的开发人员创建。熟练使用这些开发框架或第三方库能够避免重复发明轮子，使你的工作事半功倍。更重要的是这些优秀框架或第三方库的一般都得到持续的维护，是对你的产品或项目在质量与安全方便的最有效的保障。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;前端技术&lt;/strong&gt; —— 之所以将前端技术独立出来，作为一项关键技术，是因为它在今天的项目和产品的研发过程中正变得越来越重要。一个产品除了实现所需的功能之外，是否好用（用户体验）也正在成为评判一个产品是否成功的重要标准。而这都依赖于前端技术的实现，你至少需要掌握 HTML5、CSS3、JavaScript 等基本前端技术，同时进一步学习 JQuery\、LESS、SASS、AngularJS或REACT等前端框架或第三方库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据库与缓存&lt;/strong&gt; —— 任何产品或项目都需要一个数据库来存储数据。作为全栈工程师，你也需要至少掌握一到两个数据库，并知道怎样与数据库进行交互。目前流行的数据库主要有MySQL、MongoDB、Redis、Oracle、SQLServer等。MongoDB作为文档型数据库，在互联网产品中正被越来越多地使用，对于规模稍大一些的项目，我仍推荐使用MySQL或商用的Oracle作为后端数据库。而Redis这样的内存数据库则可以用于缓存，以提升系统的性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基本设计能力&lt;/strong&gt; —— 大部分关于全栈工程师的文章或讨论中，都不会将设计能力做为全栈工程师的关键技能，但我却认为这项技能非常重要。我曾被邀请评估一些软件工程师自己开发的产品，这些产品都有不错的创意，功能实现也很到位，但一看就不是一个好的产品，用户根本没有使用欲望，原因是这些产品的设计太差了，而往往那些开发者完全么有意识到问题的存在，比如色彩的不一致，排版的凌乱，不恰当的图标 等等。我所建议的基本设计能力，并不要求你像专业设计师那样能够P出神图、制作奇妙的视觉效果等，但你需要掌握最基本的UI设计原则，如 色彩的搭配，基本的排版，并具备良好的审美能力，和一些基本UI设计能力，这样你做的产品就不会太差了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在掌握了这些核心技能之后，你可以根据自己的兴趣与发展方向，学习其他方面的技术。比如，如果你对数据处理感兴趣，那么你可以学习大数据方面的技术。如果你对移动互联网更感兴趣，那么你可以学习Swit，开发ios应用。知识总是相通的，在有了良好的技术基础后，学习其他知识将会变得非常容易。&lt;/p&gt;
&lt;h4 id=&quot;u9644_u52A0_u6280_u80FD_uFF08_u8F6F_u5B9E_u529B_uFF09_uFF1A&quot;&gt;&lt;a href=&quot;#u9644_u52A0_u6280_u80FD_uFF08_u8F6F_u5B9E_u529B_uFF09_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;附加技能（软实力）：&quot;&gt;&lt;/a&gt;附加技能（软实力）：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;沟通&lt;/strong&gt; —— 除非你是在做个人项目，对于稍大一些的项目，你总是需要与同事、干系人或是客户进行沟通的。而成功的沟通往往是获得有效需求，与建立团队信心的第一步。在项目的进行过程中，你更需要通过有效的沟通去确定方案，消除误解，与项目成员协同前进。良好的沟通能力将使你在团队中更具影响力，收到更多尊重和关注。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题解决能力&lt;/strong&gt; —— 全栈工程师首先是一名工程师，他必须掌握工程化的方法来解决遇到的各种问题。我在职业生涯中的几乎所有亮点，都与解决问题相关，大到提供整个项目的架构方案，小到以最快的速度解决生产问题 等。其实有很多提高问题解决能力的方法，但没有一种比实践更有效。我所见到的优秀工程师，往往能够凭借直觉以最短的时间给出正确的解决方案，但你可能没有看到的是，在这背后其实是经过大量实践累积而来的经验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;时间管理&lt;/strong&gt; —— 作为全栈工程师，你可能会被安排同时在不同的项目中承担不同的角色。你需要合理地分配时间，保证所有的工作能够按时交付。同样在你的业余时间，你还需要花时间阅读和学习，同时你还可能会有自己的Side Project。因此，合理地进行时间分配，并对一些关键任务，进行计划是很重要的。你或许会感到一些压力，但这反而会激发你的创造力，并能让一切都有条不紊地进行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;好奇心&lt;/strong&gt; —— 对任何工作都抱有好奇心，并愿意不断学习和改善是那些优秀工程师的共同特性。软件开发领域汇集了世界上最聪明的人，各种类型的技术、产品、框架更是日新月异，层出不穷。优秀的全栈工程师需要不断地学习来抓住这些变化，跟上计算机领域发展的脚步。时常有人会问我，做计算机这一行一直会有新的东西产生，要去不断地学习，是不是会很累。我要说的是，对于将持续学习作为一种生活习惯的人来说，学习新东西并不会成为一种负担，反而是一种乐趣。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;领导力&lt;/strong&gt; —— 优秀的全栈工程师往往会被赋予技术Leader甚至项目管理者的角色。成为管理者并不是让你去支配其他人，或让其他人替你做事。管理者需要理解你的团队成员的长处与不足，并知道如何以服务的态度使团队获得最大化的产出。我见过一些非常优秀的工程师，当他们被安排去管理团队时，他们是排斥的，他们往往更愿意独自工作。但我想说，成为管理者，将会使你更加睿智、可靠和值得他人信赖，也会对你未来的职业生涯带来极大的益处。因此，当机会到来时，请将它视为挑战，不要排斥它。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有经验的技术领导者在招聘时，往往会同时考察应聘者技术能力与上述附加技能，而对于初级程序员的招聘来说，那些附加技能往往更被优秀的技术公司所看重。开发技能是你的硬实力，而附加技能则可以看作是你的软实力，只有同时具备这两方面技能，才能成为一名优秀的全栈工程师。&lt;/p&gt;
&lt;h3 id=&quot;u4F18_u79C0_u7684_u5168_u6808_u5DE5_u7A0B_u5E08_u9700_u8981_u8D70_u51FA_u53BB&quot;&gt;&lt;a href=&quot;#u4F18_u79C0_u7684_u5168_u6808_u5DE5_u7A0B_u5E08_u9700_u8981_u8D70_u51FA_u53BB&quot; class=&quot;headerlink&quot; title=&quot;优秀的全栈工程师需要走出去&quot;&gt;&lt;/a&gt;优秀的全栈工程师需要走出去&lt;/h3&gt;&lt;p&gt;优秀的全栈工程师不应局限于自己的工作，他更应该走出去，接触不同的技术，分享自己的经验和心得，认识更多的朋友。下面便是我的一些做法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;参加技术大会&lt;/strong&gt; —— InfoQ、CSDN、GITC、优设、TED 等网站都会定期举办各类技术大会。在这些大会上，你不仅能够听到技术大咖们带来的各自领域最佳技术实践，而且能认识很多行业内的朋友。这对你开拓思路，扩大技术社交圈都很有帮助。因此，如果公司没有安排你去参加这些技术大会的话，那就自己买票参加，作为对自己的一种投资吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;作公开演讲&lt;/strong&gt; —— 全栈工程师并不需要是一个公开演讲者，但作为团队的核心成员，他一定需要在团队内部做技术、管理等方面的进行演讲。如果你是一个乐于分享的技术达人，那么也可以尝试录制个人课程（视频或音频），并在慕课、网易课堂、优酷 或 像 荔枝、喜马拉雅 等各种媒体分享自己的技能和知识，不要因为自己并不是专家就不愿尝试，相信我，你用心制作的内容，会获得大家的认可，并收获一大批粉丝的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;个人博客&lt;/strong&gt; —— 每天进步一点点，一年以后你便会获得质的飞跃。优秀的全栈工程师懂得如何进行知识的积累，而技术博客就是一个很好的方式，将自己平时的实践、思考记录下来，配以tag标签方便日后的回顾。最有意思的是，当你在不断记录和更新你的博客同时，世界各地的程序员也会通过你的博客认识你。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;参加线下活动&lt;/strong&gt; —— 与以前程序员总是宅在家里不同，现在的年轻程序员们更愿意分享和交流。很多网站也会组织不同技术主题的线下活动，在这些活动中你可以听到一些技术牛人的分享，还可以找到很多和你一样对技术富有激情的人。而我现在所做的开源项目中的很多团队成员，正是我在这些线下活动中结识的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;全栈工程师决不是一夜练成的，你需要打好技术基础，强化核心技能，并持续学习。相信有一天你也能像我一样，感受到自由地运用技术，开发出优秀产品所带来的乐趣的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/02/17/如何成为一名优秀的全栈工程师/hero.png&quot; alt=&quot;《全栈工程师》&quot; title=&quot;《全栈工程师》&quot;&gt;
&lt;h3 id=&quot;u5199_u5728_u6700_u524D&quot;&gt;&lt;a href=&quot;#u5199_u5728_u6700_u
    
    </summary>
    
      <category term="程序员" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    
      <category term="全栈" scheme="http://yoursite.com/tags/%E5%85%A8%E6%A0%88/"/>
    
      <category term="程序员" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>给职场新人的10点职涯建议</title>
    <link href="http://yoursite.com/2016/02/11/%E7%BB%99%E8%81%8C%E5%9C%BA%E6%96%B0%E4%BA%BA%E7%9A%8410%E7%82%B9%E8%81%8C%E6%B6%AF%E5%BB%BA%E8%AE%AE/"/>
    <id>http://yoursite.com/2016/02/11/给职场新人的10点职涯建议/</id>
    <published>2016-02-11T02:59:41.000Z</published>
    <updated>2016-02-16T15:06:53.000Z</updated>
    
    <content type="html">&lt;p&gt;一转眼从学校毕业已经超过10年了，从一名普通的程序员成长为500强企业的架构师，如今也开始做IT管理工作，可以算是一个过来人。这一路走来，自己有一些感悟，也看到其他人的一些经验教训，对于如何掌控自己的职业生涯，总结了10点建议，希望对那些处在迷茫中的年轻朋友们有些许帮助。&lt;/p&gt;
&lt;h3 id=&quot;u5C3D_u65E9_u786E_u5B9A_u4F60_u60F3_u505A_u7684_u4E8B_u60C5&quot;&gt;&lt;a href=&quot;#u5C3D_u65E9_u786E_u5B9A_u4F60_u60F3_u505A_u7684_u4E8B_u60C5&quot; class=&quot;headerlink&quot; title=&quot;尽早确定你想做的事情&quot;&gt;&lt;/a&gt;尽早确定你想做的事情&lt;/h3&gt;&lt;p&gt;一个人的职业生涯总是包含很多阶段，而每个阶段又是环环相扣，互为因果的。因此，我们总是能够看到一群同时毕业的人，经过10年后，各自的发展却迥然不同，有些人总能快人一步，提前到达职涯的新高，而有些人却慢人半拍，逐渐掉队。这其中，一定有运气等其他客观因素的影响，但仔细观察，我们往往会发现那些成功的人，往往是那些有着坚定目标，并持续努力的人。&lt;/p&gt;
&lt;p&gt;因此，尽早确定你想做的事情——你的职业目标，意味着你可以获得比其他人更多的时间去努力。我们中绝大多数都不是天才，因此所能达到的成就，也就往往与你为达成这一目标所付出的时间成正比了。&lt;/p&gt;
&lt;p&gt;作为一名技术人员，在我呆过的每个公司，都会有同事因为待遇或其他原因，放弃技术路线，转而成为一名业务人员。而我由于对技术的热爱，始终坚持从事技术相关的工作，随着经验与能力的累积，我成了公司的技术专家，反而获得了更好的升职机会。现在再回过头来看，正是由于我比较早地确定了自己的职业方向，并坚持下来，才在某些领域获得了比较优势，并取得现有成绩的。&lt;/p&gt;
&lt;h3 id=&quot;10_2C000_u5C0F_u65F6_u5B9A_u5F8B&quot;&gt;&lt;a href=&quot;#10_2C000_u5C0F_u65F6_u5B9A_u5F8B&quot; class=&quot;headerlink&quot; title=&quot;10,000小时定律&quot;&gt;&lt;/a&gt;10,000小时定律&lt;/h3&gt;&lt;p&gt;我曾看过一本书，名叫《异类 不一样的成功启示录》，作者对社会中那些成功人士进行了分析，书中那些被称为异类的 计算机天才，杰出的棒球手，演奏家，无一例外都是经过了超过10,000小时的练习才达到了超乎常人的技能。&lt;/p&gt;
&lt;p&gt;而另一个我最喜欢故事，是关于一位做寿司的日本老人的，他便是被誉为寿司之神的小野二郎，他的寿司店数寄屋桥次郎（Sukiyabashi Jiro）被《米其林美食指南》评为三颗星的美食店，被公认为拥有世界上最好的寿司服务。而他作为全球最年长的米其林三星寿司大厨在88岁高龄仍然在不断探索寿司制作之道，当然他花在寿司制作上的时间，也远远超过了10,000小时。&lt;/p&gt;
&lt;p&gt;我使用上面两个例子，是希望告诉你，无论你在哪个领域，只要能坚持为同一目标持续不断地努力，花费超过10,000小时进行练习和钻研，那么你也一定能够成为该领域杰出的人才，并成为他人眼中的异类。&lt;/p&gt;
&lt;h3 id=&quot;u63D0_u9AD8_u5DE5_u4F5C_u6548_u7387&quot;&gt;&lt;a href=&quot;#u63D0_u9AD8_u5DE5_u4F5C_u6548_u7387&quot; class=&quot;headerlink&quot; title=&quot;提高工作效率&quot;&gt;&lt;/a&gt;提高工作效率&lt;/h3&gt;&lt;p&gt;在工作中，我们经常会看到这样的场景，甲，乙两个员工，领导布置了类似的工作，甲员工非常努力，加班加点按时交付了领导布置的工作，而乙员工做得很快，在很短时间内便完成了，一到下班就回家去了。那么作为老板，会如何评价这两位员工呢？我想他一定会认为 甲是一个好员工，但乙员工的潜力更大，值得花更大的力气去培养。&lt;/p&gt;
&lt;p&gt;我们做得更快，也就意味着我们可以做得更多，为公司或团体创造更大的利益。这同样能给我们自己带来更多的机会。因此，你应该尽可能地提高自己的工作效率。&lt;/p&gt;
&lt;p&gt;对于提升工作效率，我有两点建议&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提升工作节奏&lt;/li&gt;
&lt;li&gt;借助工具完成工作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;提升工作节奏：我常喜欢使用中国男足与巴西男足来做比较，他们之间的最大差距，在我看来并非技术，而是完全不同的节奏，巴西男足从单个球员到整个球队的节奏都比中国男足要快，因此中国男足始终处于被动。在工作中也是一样，我们往往会以自己觉得舒服的节奏来工作，但如果我们能够不断尝试加快我们的工作节奏，便能极大地激发自己的潜能，有效提升自己的工作效率。&lt;/p&gt;
&lt;p&gt;借助工具完成工作：像Google，Facebook这样的大型互联网公司的员工之所以有那么高的工作效率，其中一个重要原因，便是他们善于运用和创造工具，大部分重复的劳动都是通过工具来完成的。同样，我们也需要时常审视自己的工作，哪些是让你头疼的重复劳动，怎样才能让工具来帮你完成。当我们有了这样的意识，我们便自然会去尝试寻找或创造一些工具来使自己从繁复的工作中摆脱出来，变得更加高效。&lt;/p&gt;
&lt;h3 id=&quot;u7B80_u660E_u7684_u6C9F_u901A_u65B9_u5F0F&quot;&gt;&lt;a href=&quot;#u7B80_u660E_u7684_u6C9F_u901A_u65B9_u5F0F&quot; class=&quot;headerlink&quot; title=&quot;简明的沟通方式&quot;&gt;&lt;/a&gt;简明的沟通方式&lt;/h3&gt;&lt;p&gt;我认为现在的公司大致可以分为两大类，第一类是以谷歌，百度为代表的以技术为中心（或技术驱动型）的企业，这样的企业往往已经采用扁平化的管理方式，更推崇个人的创造能力以及小团队的贡献。而另一类是传统的以业务为中心的企业，比如我所在的传统金融行业，他们大部分还是以业务驱动，或正处在互联网的改造之中的。这样的企业往往有着比较明确的层级关系，并且以邮件作为主要的沟通方式。&lt;/p&gt;
&lt;p&gt;无论你是在哪一类公司，你都很难去改变公司文化，但作为个体，我建议尝试更简明的沟通方式，这不仅能使自己的工作更清晰，也能显著改善你与他人的沟通效率。就拿邮件为例，我每天大致需要处理将近50-100封邮件，而对于更高层级的管理人员，他们可能每天需要处理超过200封邮件。为了让别人更清晰地理解你的意图，我往往会在标题最开始直接加上【请审核】、【需关注】这样的标识。而对于邮件的内容，我也会将结论放在邮件的最开头部分，让其他人能在最短的时间内能够掌握邮件所要表达的主要信息和意图，如果需要进一步的信息，才阅读邮件的剩余部分。&lt;/p&gt;
&lt;p&gt;另外，可以尝试减少邮件的沟通，很多情况下一些次要的沟通，完全可以去到对方的办公桌当面沟通，或采用电话沟通，在双方达成一致或得到结论后，再追加邮件进行确认。我认为这比邮件来来回回要简单高效得多。&lt;/p&gt;
&lt;h3 id=&quot;PKSS_u4E0E_u6301_u7EED_u5B66_u4E60&quot;&gt;&lt;a href=&quot;#PKSS_u4E0E_u6301_u7EED_u5B66_u4E60&quot; class=&quot;headerlink&quot; title=&quot;PKSS与持续学习&quot;&gt;&lt;/a&gt;PKSS与持续学习&lt;/h3&gt;&lt;p&gt;在大多数的公司，在年终对员工进行考评时，都是以结果为导向，并加以横向比对的。那么我们怎样才能在与同事的竞争中脱引而出呢？&lt;/p&gt;
&lt;p&gt;国外有一个词，叫做 PKSS - PK Saturday and Sunday，也就是说在周六和周日进行比拼。爱因斯坦也曾说过：人的差别在于业余时间。特别是在现在这个竞争社会，持续学习对每一个职场人都显得尤为重要。每晚抽出2个小时，周六周日抽出4-6个小时来阅读、学习、思考或参加有意的演讲、讨论，你会发现，坚持数月之后，你便会超过周围的人。&lt;/p&gt;
&lt;p&gt;有些人可能觉得工作时用到的技能就这些，我们需要学些什么呢？我的建议是既要“专”，又要“博”。现代社会要求的是T型人才，也就是有一技之长，又能有其他相关技能。如果说你在某一个领域花10,000小时，能使你在这个领域成为一位杰出人物的话，不妨尝试在你感兴趣的其他任何领域花100小时学习，比如，花100小时学习素描，完成后你的的绘画水平能够远远超过那些从来没有学习过的人。因此，除了在你专注的领域投入时间学习之外，尝试学习任何你感兴趣的东西，比如 烹饪，写作，摄影 等等，知识往往是相通的，你学得越多便学得越快，对我而言摄影，写作等技能能够对我所从事的软件开发有很好的促进作用。&lt;/p&gt;
&lt;h3 id=&quot;u5B66_u4F1A_u63A7_u5236_u60C5_u7EEA&quot;&gt;&lt;a href=&quot;#u5B66_u4F1A_u63A7_u5236_u60C5_u7EEA&quot; class=&quot;headerlink&quot; title=&quot;学会控制情绪&quot;&gt;&lt;/a&gt;学会控制情绪&lt;/h3&gt;&lt;p&gt;大多职场新人都能比较理性地完成工作，但有时情绪控制能力还有所欠缺，具体表现有 主观，随性，情绪变化大，这往往会对个人的职业发展造成损害甚至灾难。我身边就曾有这样的例子，她是一个女孩子，非常要强，工作也总能完成得很出色，她从另一个组调来没多久，就因为一件小事与领导的意见不合，而情绪失控大吵一架，从此之后便进入了恶性循环，她总是认为领导处处故意刁难，而领导也会觉得她很难协作，久而久之眼中影响了她的工作积极性，工作质量也直线下滑，最后不得不再次转岗。可见职场中很多事情并不完全取决于你的个人能力，而更需要你有一个比较好的情商，善于控制情绪与人相处。&lt;/p&gt;
&lt;p&gt;那么如何才能提高自己的情绪控制能力呢？一个简单的方法就是做到对事不对人，当你对某一件事非常气愤时，你需要问问自己发火有没有用，如果答案是否定的，那么为什么不静下心来想想怎样去解决问题呢？其次，你需要有同理心，多站在对方的角度和立场考虑问题，即我们常说的换位思考，你会发现很多时候对方不是故意为难你和与你作对，而是也有他的考量和存在的现实问题。最后，你也应该有一些自己的情绪宣泄的方式，比如 可以与朋友聊天，练习书法，看电影等 都是不错的释放方式。&lt;/p&gt;
&lt;h3 id=&quot;u8BA9_u6700_u4F18_u79C0_u7684_u4EBA_u56F4_u7ED5_u5728_u4F60_u8EAB_u8FB9&quot;&gt;&lt;a href=&quot;#u8BA9_u6700_u4F18_u79C0_u7684_u4EBA_u56F4_u7ED5_u5728_u4F60_u8EAB_u8FB9&quot; class=&quot;headerlink&quot; title=&quot;让最优秀的人围绕在你身边&quot;&gt;&lt;/a&gt;让最优秀的人围绕在你身边&lt;/h3&gt;&lt;p&gt;苹果、谷歌、百度这些科技巨头，之所以能够不断地进行创新，一个重要的原因是，它们汇聚了世界上最优秀的人才，他们有着共同的兴趣和目标，聚集在一起形成了很多优秀的团队，从而创造出一个个令世界惊叹的产品和技术。&lt;/p&gt;
&lt;p&gt;我曾面试过一位优秀的UI设计师，当问到离职原因的时候，他告诉我，当他每天中午与他的同事们一起吃饭时，所聊的话题都是炒股、育儿、旅游，因此他决定离开那个公司。可见周围的人是否足够优秀，成了他选择企业的一个重要因素。&lt;/p&gt;
&lt;p&gt;当你还是一个职场新人的时候，你需要和优秀的人一起打拼，去完成一个又一个的目标。当你的职位不断上升时，你的身边会出现一些阿谀奉承的人，而此时，你更需要那些优秀的伙伴，能够指正你的错误，帮助你朝着正确的方向前进。&lt;/p&gt;
&lt;h3 id=&quot;u5584_u4E8E_u5F52_u7EB3_u4E0E_u8868_u8FBE&quot;&gt;&lt;a href=&quot;#u5584_u4E8E_u5F52_u7EB3_u4E0E_u8868_u8FBE&quot; class=&quot;headerlink&quot; title=&quot;善于归纳与表达&quot;&gt;&lt;/a&gt;善于归纳与表达&lt;/h3&gt;&lt;p&gt;随着自身技能和经验的提升，你在公司中很可能会被赋予更多的管理职责，或者独立承担一些重要的项目。这时归纳与表达能力将显得非常重要，你经常会被要求做项目进度的报告，亦或，在电梯或走廊里巧遇老板时，你可能也需要用最短的时间来描述当前项目的进展，遇到的问题、风险等。&lt;/p&gt;
&lt;p&gt;因为工作的关系，我曾与埃森哲的一位咨询师有过很多接触，他的归纳与表达能力都非常出色，往往能够一针见血 地描述一个问题本质，并进行透彻的分析。而他告诉我，他的这个能力并非与生俱来的，他以前曾经是一名Cobol程序员，转行做咨询后，由于个性羞涩，不善与人交往，一开始也是很怕做公开演讲，但他的老板发现他的问题后，特意安排他每天下班前，在公司内部公开做一次演讲来讲述他当天的工作内容，没过1个月，他发现自己竟然能非常自信且自如地在很多人面前进行讲演了。&lt;/p&gt;
&lt;p&gt;如果你也是一个性格都内向，不善与人交往的职场新人，不仿也学学那位咨询师，自己创造机会进行训练，比如每天模拟进行一次讲演，经过一段时间，你会惊讶于自己所取得的突破的。&lt;/p&gt;
&lt;h3 id=&quot;u638C_u63E1_u82F1_u8BED&quot;&gt;&lt;a href=&quot;#u638C_u63E1_u82F1_u8BED&quot; class=&quot;headerlink&quot; title=&quot;掌握英语&quot;&gt;&lt;/a&gt;掌握英语&lt;/h3&gt;&lt;p&gt;如果你在外企，那么英语作为一项必备技能是非常重要的。但即使你是在一家国内的企业，你仍然应该掌握英语，因为它能够帮助你获得更宽广的视野，带来更多的工作机会。&lt;/p&gt;
&lt;p&gt;我第一次真正使用英语，还是在我的第一份工作期间，一次偶然的机会，领导让我带一名来自英国剑桥大学的计算机专业暑期实习生。他给我讲述了他是如何通过互联网自学游戏编程，并与来自法国，美国等地的在校学生组成团队，研发出一款3D游戏，并在各个学校进行讲演的经历。而这一切都是通过英语进行交流沟通的。他的故事深深触动了我，从此以后，我在工作和生活中，都尽可能地去使用英语，比如我在StackOverflow上查找开发问题，我用GitHub管理代码库并和来自世界其他国家的程序员一起维护开源项目。我也在Dribbble上浏览优秀的UI设计作品以获得设计灵感，我还在Freelancer上，做一些感兴趣的兼职项目。英语使我开拓了视野，从一个国家的人，成为了一个世界的人。&lt;/p&gt;
&lt;h3 id=&quot;u7761_u7720_u4F7F_u4F60_u66F4_u52A0_u5F3A_u5927&quot;&gt;&lt;a href=&quot;#u7761_u7720_u4F7F_u4F60_u66F4_u52A0_u5F3A_u5927&quot; class=&quot;headerlink&quot; title=&quot;睡眠使你更加强大&quot;&gt;&lt;/a&gt;睡眠使你更加强大&lt;/h3&gt;&lt;p&gt;这条准则对于我非常有用。有很多人认为睡眠是弱者的表现，他们总是尽可能地晚睡。我认为这是非常危险的，睡眠能够帮助我很好地平衡生活，在一个良好的睡眠之后，我总是能够非常有活力地投入到新一天的工作中，我也会变得更有效率和更赋创造力。没有优秀睡眠的人，看似获得了更多的时间，而其实他们往往会处在更大的压力之下，从而丧失效率。这是一种恶性循环，他们不得不通过其他方式重新激活自己，比如  按摩，消遣，休假等等。&lt;/p&gt;
&lt;p&gt;在我看来，休假的作用往往被高估了，而旅行更不是休息，事实上我认为，旅行带给人的压力比呆在家里什么事都不干要大得多。我个人觉得每天完成必要的工作是一件令人愉悦和满足的事情，即使我在旅行过程中，也会至少抽出一点时间，来做一些简单的工作。当然你应该出去旅行，因为你需要去发现新的东西，而不是因为你需要放松。&lt;/p&gt;
&lt;p&gt;很多人对我说，他们早上很难醒过来。而我想说的是早醒其实不难，但早睡很难，你需要调整自己的作息时间，来保证充足的睡眠。这将使你收益终生。&lt;/p&gt;
&lt;p&gt;以上是我对自己职业生涯的一些经验分享，我长期在传统金融行业从事IT工作，比较偏技术一些，因此分享的内容可能比较片面，希望大家能够多多指正。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一转眼从学校毕业已经超过10年了，从一名普通的程序员成长为500强企业的架构师，如今也开始做IT管理工作，可以算是一个过来人。这一路走来，自己有一些感悟，也看到其他人的一些经验教训，对于如何掌控自己的职业生涯，总结了10点建议，希望对那些处在迷茫中的年轻朋友们有些许帮助。&lt;
    
    </summary>
    
      <category term="程序员" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    
      <category term="程序员" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="职业生涯" scheme="http://yoursite.com/tags/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/"/>
    
  </entry>
  
</feed>
